import numpy as np
import pylab as plt
from scipy import interpolate
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import math




#Defining basic stellar parameters of the grid

Teff=[59870., 52061., 49139., 46967., 46330., 25085., 22339., 25100., 58567, 50928, 48499, 46122, 43501, 35514, 31527, 33117,57000, 49566, 47765, 45683, 42474, 38434, 36653, 24041, 54635, 47509, 46277, 44963, 43138, 40319, 34971,25314, 52465, 45622, 43576, 40507, 37807, 33037, 24880, 29759, 50294, 43734, 42084, 40205, 36500, 32858,26494, 32953, 45971, 39975, 37688, 34549, 32589, 29727, 24838, 15267, 43811, 38097, 36525, 35524, 34052,32982, 29531, 26636, 23768, 40422, 35150, 34298, 33160, 31151, 29320, 27925, 24035, 35864, 31186, 30294,30016, 29660, 29253, 28766, 26393, 24266, 22909, 25453, 24487]#, 17169]
logg=[4.322, 4.078, 3.954, 3.836, 3.761, 2.622, 2.434, 3.017, 4.323, 4.081, 3.972, 3.850, 3.700, 3.277, 3.014, 3.235, 4.352,4.108, 4.016, 3.907, 3.749, 3.512, 3.350, 2.468, 4.383, 4.139, 4.070, 3.985, 3.884, 3.722, 3.428, 2.784,4.393, 4.150, 4.014, 3.824, 3.673, 3.386, 2.817, 2.917, 4.412, 4.170, 4.058, 3.920, 3.678, 3.451, 3.024, 3.122,4.402, 4.159, 3.966, 3.723, 3.584, 3.385, 3.020, 1.872, 4.439, 4.196, 4.056, 3.954, 3.833, 3.744, 3.493,3.266, 3.029, 4.452, 4.209, 4.124, 3.999, 3.804, 3.644, 3.525, 3.195, 4.469, 4.226, 4.113, 4.067, 4.014, 3.969,3.910, 3.665, 3.456, 3.313, 4.237, 4.060]#, 4.282]

R=[12.4, 16.3, 18.4, 20.1, 20.6, 68.7, 59.2, 15.4, 11.3, 14.9, 16.7, 18.6, 21.1, 31.7, 36.9, 14.3, 9.8, 12.9, 14.2, 15.9, 18.8, 23.2, 26.2, 58.4, 8.2, 10.8, 11.7, 12.8, 14.3, 16.8, 23.0, 45.1, 7.4, 9.7, 11.3, 13.9, 16.4, 22.1, 40.4, 23.5, 6.5, 8.5, 9.7, 11.2, 14.5, 18.5, 29.6, 17.9, 5.7, 7.5, 9.3, 12.0, 14.0, 17.5, 26.1, 75.4, 5.0, 6.5, 7.7, 8.5, 9.8, 10.7, 14.3, 18.2, 23.7, 4.4, 5.7, 6.3, 7.3, 9.0, 10.8, 12.3, 17.9, 3.7, 4.9, 5.6, 5.9, 6.2,6.6, 7.0, 9.3, 11.7, 13.7, 3.9, 4.8, 2.7]


zs = [.05, .2, .4, 1, 2]

#Defining the grid of line force parameters

#these are for solar metalicity
ksolar =     np.array([.234, .229, .296, .288, .278, .078, .042, .116, .224, .220, .217, .282, .273, .252, .211, .146, .213, .209, .207, .204, .267, .257, .244, .056, .298, .194, .193, .192, .191, .188, .245, .102, .188, .184, .183, .181, .179, .235, .102, .073, .176, .173, .172, .172, .169, .166, .116, .138, .069, .064, .069, .156, .155, .082, .125, .157, .046, .045, .049, .053, .056, .058, .060, .063, .133, .030, .029, .031, .034, .038, .040, .042, .147, .016, .016, .017, .018, .019, .020, .021, .023, .026, .031, .015, .012])#, 2.955])
alphasolar = np.array([.598, .598, .598, .598, .598, .625, .607, .625, .598, .598, .598, .598, .598, .598, .611, .632, .598, .598, .598, .598, .598, .597, .598, .668, .598, .598, .598, .598, .598, .598, .597, .609, .598, .598, .598, .598, .598, .597, .609, .645, .598, .598, .598, .598, .598, .597, .609, .647, .598, .598, .598, .598, .598, .607, .609, .422, .598, .598, .598, .598, .598, .598, .607, .607, .609, .598, .598, .598, .598, .598, .607, .607, .609, .599, .598, .598, .598, .607, .607, .607, .607, .607, .589, .608, .608])#, .403])
deltasolar = np.array([.05,.05,.05,.05,.05,.075,.05,.075,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.075,.075,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.070,.075,.05,.05,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.07,.07,.07,.07,.07,.05,.07,.07,.05])


#these are for .4 solar metalicity
ktwofifth =     np.array([.191, .187, .238, .230, .220, .074, .038, .109, .185, .181, .178, .227, .218, .200, .173, .137, .178, .175, .173, .170, .218, .208, .194, .049, .169, .166, .165, .163, .161, .158, .201, .087, .163, .160, .158, .155, .152, .196, .093, .058, .155, .153, .151, .150, .146, .143, .102, .119, .062, .061, .067, .138, .137, .075, .115, .165, .045, .044, .048, .051, .053, .055, .057, .059, .115, .031, .030, .032, .034, .038, .040, .041, .134, .018, .017, .019, .020, .020, .021, .022, .024, .028, .032, .017, .014])#, 3.970]) 
alphatwofifth = np.array([.569, .569, .569, .569, .569, .578, .575, .592, .569, .569, .569, .569, .569, .569, .573, .581, .569, .569, .569, .569, .569, .568, .569, .625, .570, .569, .569, .569, .569, .569, .568, .580, .570, .569, .569, .569, .569, .568, .580, .625, .570, .569, .569, .569, .569, .569, .581, .601, .570, .569, .569, .569, .569, .578, .581, .380, .570, .569, .569, .569, .569, .569, .578, .578, .581, .570, .569, .569, .569, .569, .578, .578, .581, .570, .569, .569, .569, .579, .579, .579, .578, .578, .560, .579, .579])#, .367] )
deltatwofifth=np.array([.05,.05,.05,.05,.05,.075,.05,.075,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.075,.075,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.070,.075,.05,.05,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.07,.07,.07,.07,.07,.05,.07,.07,.05])


#these are for .05 solar metalicity
ktwenty =       np.array([.155, .155, .185, .176, .164, .063, .036, .118, .155, .155, .156, .180, .169, .150, .126, .122, .155, .155, .156, .148, .179, .166, .149, .041, .155, .155, .155, .156, .147, .142, .170, .082, .155, .155, .156, .147, .143, .172, .090, .054, .155, .155, .155, .156, .143, .137, .101, .099, .080, .079, .083, .146, .142, .085, .115, .208, .065, .064, .067, .069, .070, .071, .071, .072, .127, .050, .049, .051, .053, .055, .056, .057, .148, .035, .034, .036, .037, .037, .037, .038, .041, .042, .047, .038, .030])#, .030])
alphatwenty =   np.array([.481, .481, .480, .480, .479, .496, .491, .496, .481, .481, .480, .480, .479, .478, .486, .480, .481, .481, .480, .480, .480, .479, .478, .534, .481, .481, .481, .480, .480, .480, .479, .494, .481, .481, .480, .480, .480, .479, .494, .522, .481, .481, .481, .480, .480, .479, .495, .494, .481, .481, .480, .480, .479, .492, .495, .293, .481, .481, .480, .480, .480, .480, .492, .492, .495, .481, .481, .481, .480, .480, .493, .492, .495, .481, .481, .481, .481, .493, .493, .493, .493, .492, .477, .494, .494])#, .274])
deltatwenty=np.array([.05,.05,.05,.05,.05,.075,.05,.075,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.075,.075,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.070,.075,.05,.05,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.07,.07,.07,.07,.07,.05,.07,.07,.05])


#these are for .2 solar metalicity
kfifth=    np.array([.179,.176,.219,.210,.199,.069,.034,.116,.175,.173,.169,.210,.201,.182,.158,.124,.172,.170,.167,.163,.205,.193,.179,.042,.167,.165,.163,.161,.158,.154,.191,.080,.164,.162,.159,.154,.151,.190,.086,.058,.160,.158,.155,.152,.147,.143,.094,.107,.069,.068,.074,.144,.141,.072,.105,.180,.053,.052,.055,.058,.060,.062,.056,.058,.113,.038,.037,.039,.041,.045,.040,.041,.126,.023,.023,.025,.025,.022,.023,.023,.026,.028,.033,.020,.016])#,6.048])
alphafifth=np.array([.535,.534,.534,.534,.533,.549,.556,.552,.535,.534,.534,.534,.533,.532,.543,.552,.535,.534,.534,.534,.534,.533,.532,.605,.535,.534,.534,.534,.534,.534,.533,.558,.535,.534,.534,.534,.534,.533,.558,.583,.535,.534,.534,.534,.533,.533,.558,.570,.535,.534,.534,.534,.533,.556,.558,.350,.535,.535,.534,.534,.534,.534,.556,.556,.558,.535,.535,.534,.534,.534,.556,.556,.559,.535,.535,.534,.534,.557,.557,.556,.556,.556,.538,.557,.557])#,.328])
deltafifth=np.array([.05,.05,.05,.05,.05,.075,.05,.075,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.075,.075,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.070,.075,.05,.05,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.07,.07,.07,.07,.07,.05,.07,.07,.05])


#these are for 2 solar metalicity
ktwice=np.array([.279,.273,.358,.349,.340,.089,.042,.134,.266,.260,.257,.339,.331,.308,.248,.175,.249,.244,.243,.241,.319,.309,.297,.071,.228,.223,.223,.223,.222,.219,.290,.120,.214,.210,.210,.209,.207,.277,.126,.081,.199,.195,.195,.195,.194,.191,.136,.172,.069,.068,.077,.176,.175,.093,.146,.145,.048,.047,.052,.056,.062,.063,.066,.070,.154,.030,.030,.031,.035,.039,.043,.045,.169,.016,.015,.017,.018,.020,.020,.020,.024,.027,.031,.015,.012])#,2.415])
alphatwice=np.array([.620,.620,.620,.619,.619,.639,.647,.642,.620,.620,.620,.619,.619,.619,.646,.653,.620,.620,.620,.619,.619,.619,.620,.695,.620,.620,.620,.620,.619,.619,.619,.625,.620,.620,.620,.619,.619,.619,.625,.682,.620,.620,.620,.619,.619,.619,.625,.665,.620,.620,.620,.619,.619,.625,.625,.464,.620,.620,.620,.619,.619,.619,.625,.625,.625,.620,.620,.620,.620,.619,.625,.625,.625,.620,.620,.620,.620,.625,.625,.625,.625,.625,.611,.625,.625])#,.431])
deltatwice=np.array([.05,.05,.05,.05,.05,.075,.05,.075,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.075,.075,.05,.05,.05,.05,.05,.05,.075,.05,.05,.05,.05,.05,.05,.070,.075,.05,.05,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.05,.07,.07,.075,.05,.05,.05,.05,.07,.07,.07,.07,.07,.05,.07,.07,.05])
	

solarZ = 0.02
targetZ = 0.014
targetZsolar = targetZ / solarZ


def kdefine(modelTeff, modellogg):
    ktarget = ( ( (ksolar - ktwofifth) / (zs[3] - zs[2]) ) * (targetZsolar - zs[2]) ) + ktwofifth
    kgrid = (interpolate.bisplrep(Teff,logg,ktarget))
    knew = interpolate.bisplev(modelTeff,modellogg,kgrid)
    return knew


def alphadefine(modelTeff, modellogg):
    alphatarget = ( ( (alphasolar - alphatwofifth) / (zs[3] - zs[2]) ) * (targetZsolar - zs[2]) ) + alphatwofifth    
    alphagrid = (interpolate.bisplrep(Teff,logg,alphatarget))
    alphanew = interpolate.bisplev(modelTeff,modellogg,alphagrid)
    return alphanew


def deltadefine(modelTeff, modellogg):
    Teffnorm = Teff / np.max(Teff)
    loggnorm = logg / np.max(logg)
    modelTeffNorm = modelTeff / np.max(Teff)
    modelloggNorm = modellogg / np.max(logg)
    distance = []
    for ii in range(len(Teff)):
        distance = np.append(distance, math.sqrt( (Teffnorm[ii] - modelTeffNorm)**2 + (loggnorm[ii] - modelloggNorm)**2))
    minindex = min(xrange(len(distance)), key=distance.__getitem__) 
    return deltasolar[minindex]




if __name__ == "__main__":


    print "For a star with Teff = 40000, logg = 4"
    print "k = " , kdefine(40000, 4)
    print "alpha = ", alphadefine(40000, 4)
    delta = deltadefine(42474., 3.749)

    
    ktarget = ( ( (ksolar - ktwofifth) / (zs[3] - zs[2]) ) * (targetZsolar - zs[2]) ) + ktwofifth
    alphatarget = ( ( (alphasolar - alphatwofifth) / (zs[3] - zs[2]) ) * (targetZsolar - zs[2]) ) + alphatwofifth



    kgrid = (interpolate.interp2d(Teff,logg,ktarget))
    alphagrid = (interpolate.interp2d(Teff,logg,alphatarget))


    Teffnew = np.arange(0, 70000,1)
    loggnew = np.arange(0, 4.5, 0.01)

    knew = kgrid(Teffnew, loggnew)
    alphanew = alphagrid(Teffnew, loggnew)
    print np.shape(knew)
    #Make the final 2D array that has our interpolated data in it
    #knew = interpolate.bisplev(Teffnew[:,0],loggnew[0,:],kgrid)
    #alphanew = interpolate.bisplev(Teffnew[:,0],loggnew[0,:],alphagrid)

    #make a 3D plot of k
    figk = plt.figure(figsize=(12, 12))
    ax = figk.add_subplot(111, projection='3d')
    surface = ax.plot_surface(Teffnew, loggnew, knew,cmap=cm.coolwarm, rstride=5, cstride=5, linewidth=0)
    ax.set_xlim(20000,60000)
    ax.set_ylim(4.5, 2)
    ax.set_zlim(0,1)
    figk.colorbar(surface, aspect=5)


    #make a 3D plot of alpha
    figa = plt.figure(figsize=(12, 12))
    ax = figa.add_subplot(111, projection='3d')
    surface = ax.plot_surface(Teffnew, loggnew, alphanew,cmap=cm.coolwarm, rstride=5, cstride=5, linewidth=0)
    ax.set_xlim(20000,60000)
    ax.set_ylim(4.5, 2)
    ax.set_zlim(.55,.7)
    figa.colorbar(surface, aspect=5)

    plt.show()

